apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-image
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  workspaces:
    - name: working-directory
    - name: ssh-creds
  params:
    - name: image-name
      type: string
      description: Name of the image
    - name: git-branch
      type: string
      description: Git branch to use
      default: main
    - name: ssh-key-secret-name
      type: string
      default: build-ssh-publickey
      description: Name of the secret containing the SSH Public Key
    - name: image-git-repo
      type: string
      default: git@github.com:ahussey-redhat/ocp-virt-demo.git
      description: Git repository that host's the image build configuration
    - name: root-password
      type: string
      default: password
      description: Initial root password to set
    - name: bootstrap-script
      type: string
      description: Bootstrap script to run
      default: |
        whoami
        dnf update -y
        echo "All done"
  tasks:
    - name: clone-image-repository
      taskRef:
        kind: ClusterTask
        name: git-clone
      params:
        - name: url
          value: "$(params.image-git-repo)"
      workspaces:
        - name: output
          workspace: working-directory
        - name: ssh-directory
          workspace: ssh-creds
    - name: create-vm-from-manifest
      taskRef:
        kind: ClusterTask
        name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              name: $(params.image-name)
            spec:
              running: false
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: $(params.image-name)
                spec:
                  accessCredentials:
                    - sshPublicKey:
                        source:
                          secret:
                            secretName: $(params.ssh-key-secret-name)
                        propagationMethod:
                          configDrive: {}
                  hostname: $(params.image-name)
                  domain:
                    cpu:
                      cores: 1
                      sockets: 1
                      threads: 1
                    devices:
                      disks:
                        - name: containerdisk
                          disk:
                            bus: virtio
                        - disk:
                            bus: virtio
                          name: cloudinitdisk
                      interfaces:
                        - bridge: {}
                          name: default
                          model: virtio
                      networkInterfaceMultiqueue: true
                      rng: {}
                    resources:
                      requests:
                        memory: 1Gi
                  networks:
                    - name: default
                      pod: {}
                  terminationGracePeriodSeconds: 0
                  volumes:
                    - name: containerdisk
                - cloudInitConfigDrive:
                    userData: |-
                      #cloud-config
                      ssh_pwauth: True
                      disable_root: False
                      chpasswd:
                        list: |
                        expire: false
                        root: $(params.root-password)
                      write_files:
                        - encoding: b64
                          content: $(params.bootstrap-script)
                          path: /var/tmp/bootstrap.sh
                          owner: 'root:root'
                          permissions: '0770'
                      runcmd:
                        - [sh, -c, /var/tmp/bootstrap.sh]
                        - sed -i -e 's/without-password/yes/' /etc/ssh/sshd_config
                        - systemctl restart sshd
      workspaces:
        - name: output
          workspace: working-directory
      runAfter:
        - clone-image-repository
    - name: stop-vm
      params:
        - name: vmName
          value: "$(params.image-name)"
        - name: stop
          value: "true"
        - name: delete
          value: "true"
      taskRef:
        kind: ClusterTask
        name: cleanup-vm
      runAfter:
        - create-vm-from-manifest
    - name: sysprep-vm
      taskRef:
        kind: Task
        name: disk-virt-sysprep
      params:
        - name: pvc
          value: "$(params.image-name)"
      runAfter:
        - stop-vm
